package ru.sirius.account.ui.partner;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import ru.sirius.account.ui.goods.RBGoodsController;
import ru.sirius.account.ui.goods.RBGoodsPanel;
import ru.sirius.account.ui.utils.multispan.AttributiveCellTableModel;


public class RBPartnerPanel extends javax.swing.JPanel {

    RBPartnerController controller;
    /**
     * Creates new form RBPartnerPanel
     */
    public RBPartnerPanel() {
        
        initComponents();
        
        addButton.setIcon(new ImageIcon(this.getClass().getResource("add.gif")));
        editButton.setIcon(new ImageIcon(this.getClass().getResource("edit.gif")));
        deleteButton.setIcon(new ImageIcon(this.getClass().getResource("stop.png")));
        hiddenButton.setIcon(new ImageIcon(this.getClass().getResource("../hidden.png")));
        restoreButton.setIcon(new ImageIcon(this.getClass().getResource("../restore.png")));
        
        try {
            controller = new RBPartnerController((AttributiveCellTableModel) partnerTable.getModel());
            controller.initialize();
        } catch (SQLException ex) {
            Logger.getLogger(RBGoodsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        partnerTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        hiddenButton = new javax.swing.JToggleButton();
        restoreButton = new javax.swing.JButton();

        partnerTable.setAutoCreateRowSorter(true);
        partnerTable.setModel(new AttributiveCellTableModel());
        jScrollPane1.setViewportView(partnerTable);

        addButton.setToolTipText(org.openide.util.NbBundle.getMessage(RBPartnerPanel.class, "RBPartnerPanel.addButton.toolTipText")); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setToolTipText(org.openide.util.NbBundle.getMessage(RBPartnerPanel.class, "RBPartnerPanel.editButton.toolTipText")); // NOI18N
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setToolTipText(org.openide.util.NbBundle.getMessage(RBPartnerPanel.class, "RBPartnerPanel.deleteButton.toolTipText")); // NOI18N
        deleteButton.setRolloverEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        hiddenButton.setToolTipText(org.openide.util.NbBundle.getMessage(RBPartnerPanel.class, "RBPartnerPanel.hiddenButton.toolTipText")); // NOI18N
        hiddenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hiddenButtonActionPerformed(evt);
            }
        });

        restoreButton.setToolTipText(org.openide.util.NbBundle.getMessage(RBPartnerPanel.class, "RBPartnerPanel.restoreButton.toolTipText")); // NOI18N
        restoreButton.setEnabled(false);
        restoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hiddenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(restoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(hiddenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(restoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
//        try {
//            ArticlePanel panel = new ArticlePanel(null);
//            ValidationPanel validationPanel = new ValidationPanel(panel.getValidationGroup());
//            validationPanel.setInnerComponent(panel);
//            if (validationPanel.showOkCancelDialog("Создание артикула")) {
//                builder.createArticle(panel.getArticle());
//            }
//        } catch (SQLException ex) {
//            Exceptions.printStackTrace(ex);
//        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed

//        RBGoodsController.Row row = builder.getRow(goodsTable.getSelectedRow());
//        if (row == null) {
//            return;
//        }
//
//        if( row.rowtype == RBGoodsController.ROWTYPE.CATEGORY){
//            CategoryPanel panel = new CategoryPanel(row.category);
//            ValidationPanel validationPanel = new ValidationPanel(panel.getValidationGroup());
//            validationPanel.setInnerComponent(panel);
//            if (validationPanel.showOkCancelDialog("Редактирование категории")) {
//                try {
//                    row.category = panel.getCategory();
//                    builder.updateRow(row);
//                } catch (SQLException ex) {
//                    Exceptions.printStackTrace(ex);
//                }
//            }
//        }else if( row.article != null){
//            try {
//                ArticlePanel panel = new ArticlePanel(row.article);
//                ValidationPanel validationPanel = new ValidationPanel(panel.getValidationGroup());
//                validationPanel.setInnerComponent(panel);
//                if (validationPanel.showOkCancelDialog("Редактирование артикула")) {
//                    row.article = panel.getArticle();
//                    builder.updateRow(row);
//                }
//            } catch (SQLException ex) {
//                Exceptions.printStackTrace(ex);
//            }
//        }

    }//GEN-LAST:event_editButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
//        try {
//
//            RBGoodsController.Row row = builder.getRow(goodsTable.getSelectedRow());
//            if (row == null) {
//                return;
//            }
//
//            if (row.rowtype == RBGoodsController.ROWTYPE.CATEGORY &&  JOptionPane.YES_OPTION ==
//                JOptionPane.showConfirmDialog(this, "Удалить директорию и все артикулы, входящие в неё?",
//                    "Удаление", JOptionPane.YES_NO_OPTION)) {
//                builder.removeRow(row, hiddenButton.isSelected());
//
//            } else if (row.rowtype == RBGoodsController.ROWTYPE.ARTICLE && JOptionPane.YES_OPTION ==
//                JOptionPane.showConfirmDialog(this, "Удалить артикул?", "Удаление", JOptionPane.YES_NO_OPTION)) {
//                builder.removeRow(row, hiddenButton.isSelected());
//            }
//        } catch (SQLException ex) {
//            Exceptions.printStackTrace(ex);
//        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void hiddenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hiddenButtonActionPerformed

//        boolean show = hiddenButton.isSelected();
//        restoreButton.setEnabled(show);
//        builder.showDeleted(show);

    }//GEN-LAST:event_hiddenButtonActionPerformed

    private void restoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreButtonActionPerformed

//        int position = goodsTable.getSelectedRow();
//        if (position == -1) {
//            return;
//        }
//
//        Article article = builder.getDeletedArticle(position);
//
//        if( article != null){
//            try {
//                ArticlePanel panel = new ArticlePanel(article);
//                ValidationPanel validationPanel = new ValidationPanel(panel.getValidationGroup());
//                validationPanel.setInnerComponent(panel);
//                if (validationPanel.showOkCancelDialog("Восстановление артикула")) {
//                    builder.restoreArticle(panel.getArticle());
//                }
//            } catch (SQLException ex) {
//                Exceptions.printStackTrace(ex);
//            }
//        }
    }//GEN-LAST:event_restoreButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JToggleButton hiddenButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable partnerTable;
    private javax.swing.JButton restoreButton;
    // End of variables declaration//GEN-END:variables
}
